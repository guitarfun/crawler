// Generated by CoffeeScript 1.9.3
(function() {
  var Q, baseDir, cheerio, download, fetchList, fs, http, i, iconv, index, log4js, logger, path, plan, processListContent;

  path = require('path');

  log4js = require('log4js');

  http = require('http');

  iconv = require('iconv-lite');

  cheerio = require('cheerio');

  fs = require("fs");

  Q = require('q');

  baseDir = path.join(path.dirname(__filename), "../../../");

  log4js.configure({
    appenders: [
      {
        type: 'console'
      }, {
        type: 'file',
        filename: baseDir + '/logs/jita8/fetch_jcx.log'
      }
    ]
  });

  logger = log4js.getLogger();

  fetchList = function(page) {
    var deferred;
    deferred = Q.defer();
    logger.info("Fetching page " + page);
    http.get("http://jitapu.jita8.com/chaxun.asp?move=" + page + "&leibie=muse", function(res) {
      var content;
      content = '';
      res.on('data', function(data) {
        return content += iconv.decode(data, "GBK");
      });
      return res.on('end', function() {
        return deferred.resolve(content);
      });
    }).on('error', deferred.reject);
    return deferred.promise;
  };

  processListContent = function(content) {
    var $, name, names, processors;
    $ = cheerio.load(content);
    names = $('td.style156 a').filter(function(index, ele) {
      return $(ele).text().indexOf(".jcx") !== -1;
    }).map(function(index, ele) {
      return $(ele).text() + ".rar";
    });
    processors = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = names.length; i < len; i++) {
        name = names[i];
        results.push(download(name));
      }
      return results;
    })();
    return Q.all(processors);
  };

  download = function(fileName) {
    var deferred, link;
    deferred = Q.defer();
    link = "http://jitapu1.jita8.com/" + encodeURI("吉他谱") + "/" + encodeURI("muse格式") + "/" + encodeURI(fileName);
    logger.info("Downloading " + link);
    http.get(link, function(res) {
      var buf;
      buf = new Buffer(1024);
      res.on('data', function(data) {
        return buf = Buffer.concat([buf, data]);
      });
      return res.on("end", function() {
        var outputPath;
        outputPath = path.join(baseDir, "data", "jita8", "jcx", fileName);
        fs.writeFileSync(outputPath, buf);
        return deferred.resolve();
      });
    }).on('error', deferred.reject);
    return deferred.promise;
  };

  plan = Q();

  for (index = i = 1; i <= 33; index = ++i) {
    plan = plan.then(fetchList.bind(null, index)).fail(function(e) {
      return logger.error(e);
    }).then(processListContent).fail(function(e) {
      return logger.error(e);
    });
  }

}).call(this);
