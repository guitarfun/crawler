// Generated by CoffeeScript 1.9.3
(function() {
  var Q, baseDir, cheerio, download, extractFileLink, fetchList, fs, http, i, iconv, index, log4js, logger, path, plan, processListContent;

  path = require('path');

  log4js = require('log4js');

  http = require('http');

  iconv = require('iconv-lite');

  cheerio = require('cheerio');

  fs = require("fs");

  Q = require('q');

  baseDir = path.join(path.dirname(__filename), "../../../");

  log4js.configure({
    appenders: [
      {
        type: 'console'
      }, {
        type: 'file',
        filename: baseDir + '/logs/jita8/fetch_midi.log'
      }
    ]
  });

  logger = log4js.getLogger();

  fetchList = function(page) {
    var deferred;
    deferred = Q.defer();
    logger.info("Fetching page " + page);
    http.get("http://jitapu.jita8.com/chaxun.asp?move=" + page + "&leibie=mid", function(res) {
      var content;
      content = '';
      res.on('data', function(data) {
        return content += iconv.decode(data, "GBK");
      });
      return res.on('end', function() {
        return deferred.resolve(content);
      });
    }).on('error', function() {
      return deferred.reject(page);
    });
    return deferred.promise;
  };

  processListContent = function(content) {
    var $, processors;
    $ = cheerio.load(content);
    processors = $('td.style156 a').map(function(index, ele) {
      return extractFileLink("http://jitapu.jita8.com/" + $(ele).attr('href'), $(ele).text()).fail(function(link) {
        return logger.error("Extract link error: " + link);
      }).then(download).fail(function(link) {
        return logger.error("Download error: " + link);
      });
    });
    return Q.all(processors);
  };

  extractFileLink = function(link, name) {
    var deferred;
    deferred = Q.defer();
    http.get(link, function(res) {
      var content;
      content = '';
      res.on('data', function(data) {
        return content += iconv.decode(data, "GBK");
      });
      return res.on('end', function() {
        var downloadLink, match, regExp;
        regExp = /javascript:mm\('(.+?)'/;
        match = regExp.exec(content);
        if ((match != null ? match.length : void 0) !== 2) {
          deferred.reject(link);
          return;
        }
        downloadLink = match[1];
        return deferred.resolve([downloadLink, name]);
      });
    }).on('error', function() {
      return deferred.reject(link);
    });
    return deferred.promise;
  };

  download = function(arg) {
    var deferred, downloadLink, name;
    downloadLink = arg[0], name = arg[1];
    deferred = Q.defer();
    logger.info("Downloading " + downloadLink);
    http.get(encodeURI(downloadLink), function(res) {
      var buf;
      buf = new Buffer(1024);
      res.on('data', function(data) {
        return buf = Buffer.concat([buf, data]);
      });
      return res.on("end", function() {
        var outputPath;
        outputPath = path.join(baseDir, "data", "jita8", "midi", name + ".rar");
        fs.writeFileSync(outputPath, buf);
        return deferred.resolve();
      });
    }).on('error', function() {
      return deferred.reject(downloadLink);
    });
    return deferred.promise;
  };

  plan = Q();

  for (index = i = 1; i <= 125; index = ++i) {
    plan = plan.then(fetchList.bind(null, index)).fail(function(page) {
      return logger.error("Fetch list error. Page : " + page);
    }).then(processListContent);
  }

}).call(this);
