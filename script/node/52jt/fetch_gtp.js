// Generated by CoffeeScript 1.9.3
(function() {
  var Q, baseDir, cheerio, download, extractDownloadLink, extractDownloadPages, fetchArtist, fs, getLinksFromList, http, index, j, limitConcurrency, log4js, logger, path, plan, throat;

  path = require('path');

  log4js = require('log4js');

  http = require('http');

  cheerio = require('cheerio');

  fs = require("fs");

  Q = require('q');

  throat = require('throat')(Q);

  limitConcurrency = require("../common/limit_concurrency").limitConcurrency;

  baseDir = path.join(path.dirname(__filename), "../../../");

  log4js.configure({
    appenders: [
      {
        type: 'console'
      }, {
        type: 'file',
        filename: baseDir + '/logs/52jt/fetch_gtp.log'
      }
    ]
  });

  logger = log4js.getLogger();

  if (typeof String.prototype.endsWith !== 'function') {
    String.prototype.endsWith = function(suffix) {
      return this.indexOf(suffix, this.length - suffix.length) !== -1;
    };
  }

  getLinksFromList = function(content) {
    var $;
    $ = cheerio.load(content);
    return $("#singer_content #gtp_detail a.graya12").map(function(index, ele) {
      return {
        'link': $(ele).attr('href'),
        'name': $(ele).text().trim()
      };
    }).get();
  };

  fetchArtist = function(id) {
    var deferred, links;
    deferred = Q.defer();
    logger.info("Fetching artist " + id);
    links = [];
    http.get("http://www.52jt.net/singer-list.asp?/gtp_" + id + ".html", function(res) {
      var content;
      content = '';
      res.on('data', function(data) {
        return content += data;
      });
      return res.on('end', function() {
        var $, artistName, i, j, match, processedCount, ref, regExp, results, totalPage;
        regExp = /共(\d+)页/;
        match = regExp.exec(content);
        if ((match != null ? match.length : void 0) !== 2) {
          logger.error("Pagination format error");
          deferred.reject();
          return;
        }
        totalPage = parseInt(match[1]);
        logger.info("Total page:" + totalPage);
        if (totalPage === 0) {
          logger.info("Empty artist");
          deferred.reject();
        }
        $ = cheerio.load(content);
        artistName = $("#singer_title strong").text();
        if (totalPage === 1) {
          return deferred.resolve([artistName, getLinksFromList(content)]);
        } else {
          links = getLinksFromList(content);
          processedCount = 1;
          results = [];
          for (i = j = 2, ref = totalPage; 2 <= ref ? j <= ref : j >= ref; i = 2 <= ref ? ++j : --j) {
            results.push(http.get("http://www.52jt.net/singer-list.asp?/gtp_" + id + "_" + i + ".html", function(res) {
              content = '';
              res.on('data', function(data) {
                return content += data;
              });
              return res.on('end', function() {
                processedCount += 1;
                links = links.concat(getLinksFromList(content));
                if (processedCount === totalPage) {
                  return deferred.resolve([artistName, links]);
                }
              });
            }).on('error', function(err) {
              logger.error(err);
              return processedCount += 1;
            }));
          }
          return results;
        }
      });
    }).on('error', function(err) {
      logger.error(err);
      return deferred.reject();
    });
    return deferred.promise.timeout(60000);
  };

  extractDownloadPages = function(artistName, links) {
    var link, promises, throatPromise;
    throatPromise = limitConcurrency(function(link) {
      var filename, pageLink;
      pageLink = link['link'];
      filename = link['name'];
      return extractDownloadLink(pageLink).then(function(downloadLink) {
        return download(downloadLink, filename, artistName);
      })["catch"](function(err) {
        logger.error("Process error:" + pageLink);
        if (err != null) {
          return logger.error(err);
        }
      });
    }, 10);
    promises = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = links.length; j < len; j++) {
        link = links[j];
        results.push(throatPromise(link));
      }
      return results;
    })();
    return Q.allSettled(promises);
  };

  extractDownloadLink = function(link) {
    var content, deferred;
    deferred = Q.defer();
    content = '';
    http.get(link, function(res) {
      content = '';
      res.on('data', function(data) {
        return content += data;
      });
      return res.on('end', function() {
        var $, downLoadLink;
        $ = cheerio.load(content);
        downLoadLink = $("#gtp_content a.graya16").attr("href");
        if (!downLoadLink) {
          return deferred.reject();
        } else {
          return deferred.resolve(downLoadLink);
        }
      });
    }).on('error', function(err) {
      logger.error(err);
      return deferred.reject();
    });
    return deferred.promise.timeout(30000);
  };

  download = function(downloadLink, filename, artistName) {
    var deferred, extension, index;
    deferred = Q.defer();
    logger.info("Downloading " + downloadLink);
    index = downloadLink.lastIndexOf(".");
    extension = downloadLink.substr(index);
    filename = filename + extension;
    http.get(downloadLink, function(res) {
      var buf;
      buf = new Buffer(1024);
      res.on('data', function(data) {
        return buf = Buffer.concat([buf, data]);
      });
      return res.on("end", function() {
        var outputDir, outputPath;
        outputPath = path.join(baseDir, "data", "52jt", "gtp", artistName, filename);
        outputDir = path.join(baseDir, "data", "52jt", "gtp", artistName);
        if (!fs.existsSync(outputDir)) {
          fs.mkdirSync(outputDir);
        }
        return fs.writeFile(outputPath, buf, function(err) {
          if (err != null) {
            logger.error(err);
            return;
          }
          return deferred.resolve();
        });
      });
    }).on('error', function(err) {
      logger.error(err);
      return deferred.reject();
    });
    return deferred.promise.timeout(30000);
  };

  plan = Q();

  for (index = j = 217; j <= 6000; index = ++j) {
    plan = plan.then(fetchArtist.bind(null, index)).spread(extractDownloadPages)["catch"](function(ex) {
      if (ex != null) {
        return logger.info(ex);
      }
    });
  }

  plan.done();

}).call(this);
