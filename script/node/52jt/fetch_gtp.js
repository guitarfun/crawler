// Generated by CoffeeScript 1.9.3
(function() {
  var Q, baseDir, cheerio, download, extractDownloadPages, fetchArtist, fn, fs, getLinksFromList, http, index, j, log4js, logger, path, plan, url;

  path = require('path');

  log4js = require('log4js');

  http = require('http');

  cheerio = require('cheerio');

  fs = require("fs");

  Q = require('q');

  url = require('url');

  baseDir = path.join(path.dirname(__filename), "../../../");

  log4js.configure({
    appenders: [
      {
        type: 'console'
      }, {
        type: 'file',
        filename: baseDir + '/logs/52jt/fetch_gtp.log'
      }
    ]
  });

  logger = log4js.getLogger();

  if (typeof String.prototype.endsWith !== 'function') {
    String.prototype.endsWith = function(suffix) {
      return this.indexOf(suffix, this.length - suffix.length) !== -1;
    };
  }

  getLinksFromList = function(content) {
    var $;
    $ = cheerio.load(content);
    return $("#singer_content a.graya12").map(function(index, ele) {
      return {
        'link': $(ele).attr('href'),
        'name': $(ele).text().trim()
      };
    });
  };

  fetchArtist = function(id) {
    var deferred, links;
    deferred = Q.defer();
    logger.info("Fetching artist " + id);
    links = [];
    http.get("http://www.52jt.net/singer-list.asp?/gtp_" + id + ".html", function(res) {
      var content;
      content = '';
      res.on('data', function(data) {
        return content += data;
      });
      return res.on('end', function() {
        var $, artistName, i, j, match, processedCount, ref, regExp, results, totalPage;
        regExp = /共(\d+)页/;
        match = regExp.exec(content);
        if ((match != null ? match.length : void 0) !== 2) {
          deferred.reject(id);
          return;
        }
        totalPage = match[1];
        if (parseInt(totalPage) === 0) {
          deferred.reject(null);
        }
        $ = cheerio.load(content);
        artistName = $("#singer_title strong").text();
        if (parseInt(totalPage) === 1) {
          return deferred.resolve([artistName, getLinksFromList(content)]);
        } else {
          processedCount = 1;
          results = [];
          for (i = j = 2, ref = totalPage; 2 <= ref ? j <= ref : j >= ref; i = 2 <= ref ? ++j : --j) {
            results.push(http.get("http://www.52jt.net/singer-list.asp?/gtp_" + id + "_" + i + ".html", function(res) {
              content = '';
              res.on('data', function(data) {
                return content += data;
              });
              return res.on('end', function() {
                processedCount += 1;
                links = links.concat(getLinksFromList(content));
                if (processedCount === totalPage) {
                  return deferred.resolve([artistName, links]);
                }
              });
            }).on('error', function(err) {
              logger.error(err);
              return processedCount += 1;
            }));
          }
          return results;
        }
      });
    }).on('error', function(err) {
      logger.error(err);
      return deferred.reject(id);
    });
    return deferred.promise;
  };

  extractDownloadPages = function(arg) {
    var artistName, deferred, link, links, promises;
    artistName = arg[0], links = arg[1];
    promises = (function() {
      var fn, j, len, results;
      fn = function(link, deferred) {
        var filename, pageLink;
        pageLink = link['link'];
        filename = link['name'];
        return http.get(pageLink, function(res) {
          var content;
          content = '';
          res.on('data', function(data) {
            return content += data;
          });
          return res.on('end', function() {
            var $, downLoadLink;
            $ = cheerio.load(content);
            downLoadLink = $("#gtp_content a.graya16").attr("href");
            return download(downLoadLink, filename, artistName).then(function() {
              return deferred.reslove();
            }).fail('error', function(downloadLink) {
              logger.error("Download error:" + downloadLink);
              return deferred.reject();
            });
          });
        }).on('error', function(err) {
          logger.error(err);
          logger.error("Process error:" + link);
          return deferred.reject();
        });
      };
      results = [];
      for (j = 0, len = links.length; j < len; j++) {
        link = links[j];
        deferred = Q.defer();
        fn(link, deferred);
        results.push(deferred.promise);
      }
      return results;
    })();
    return Q.all(promises);
  };

  download = function(downloadLink, filename, artistName) {
    var deferred, extension, index, req, requestTimer;
    deferred = Q.defer();
    logger.info("Downloading " + downloadLink);
    index = downloadLink.lastIndexOf(".");
    extension = downloadLink.substr(index);
    filename = filename + extension;
    requestTimer = setTimeout(function() {
      req.abort();
      logger.error('Request timeout : ' + downloadLink);
      return deferred.reject(downloadLink);
    }, 20000);
    req = http.get(downloadLink, function(res) {
      var buf;
      buf = new Buffer(1024);
      res.on('data', function(data) {
        return buf = Buffer.concat([buf, data]);
      });
      return res.on("end", function() {
        var outputDir, outputPath;
        clearTimeout(requestTimer);
        outputPath = path.join(baseDir, "data", "52jt", "gtp", artistName, filename);
        outputDir = path.join(baseDir, "data", "52jt", "gtp", artistName);
        if (!fs.existsSync(outputDir)) {
          fs.mkdirSync(outputDir);
        }
        fs.writeFileSync(outputPath, buf);
        return deferred.resolve();
      });
    }).on('error', function(err) {
      logger.error(err);
      return deferred.reject(downloadLink);
    });
    return deferred.promise;
  };

  plan = Q();

  fn = function(index) {
    return plan = plan.then(function() {
      return fetchArtist(index);
    }).fail(function(id) {
      return logger.error("Fetch artist error : " + id);
    }).then(extractDownloadPages);
  };
  for (index = j = 1; j <= 1; index = ++j) {
    fn(index);
  }

}).call(this);
